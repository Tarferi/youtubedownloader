#pragma once
#include "common.h"
#include <string>
#include "Cache.h"

struct YoutubeSettings {
	bool use_video_cache;
	bool use_custom_fmt_parser;
	char* url_parser_endpoint;
	bool peek;
	Cache* cache;
};

typedef void(*DownloadProgress)(void* instance, unsigned int done, unsigned int totalSize);

class YoutubeGetter {

public:
	ReadBuffer* read(YoutubeSettings* settings, bool* stop, char* url, unsigned int remoteLength, DownloadProgress reporter, void* reporterInstance);

	ReadBuffer* read(YoutubeSettings* settings, bool* stop, char* url);

};

class YoutubeVideoInfo;

class YoutubeVideo {

public:

	YoutubeVideo(char* name, unsigned char* data, unsigned int dataLength) {
		this->videoName = name;
		this->rawData = data;
		this->rawDataLength = dataLength;
	}

	virtual ~YoutubeVideo() {
		if (this->rawData != nullptr) {
			free(this->rawData);
			this->rawData = nullptr;
		}
		if (this->videoName != nullptr) {
			free(this->videoName);
			this->videoName = nullptr;
		}
	}

	unsigned int getRawDataSize() {
		return rawDataLength;
	}

	YoutubeVideoInfo* getInfo() {
		return info;
	}

	unsigned char* getRawData() {
		return rawData;
	}

	char* videoName = nullptr;
private:
	unsigned char* rawData = nullptr;
	unsigned int rawDataLength;
	YoutubeVideoInfo* info;
};

class Youtube;

struct YoutubeVideoInfoItem {
	char* quality;
	char* format;
	char* url;
	char* rawFormat;
	bool hasAudio;
	bool hasVideo;
	unsigned int length;
};

class FormatList {

public:

	static FormatList* create();

	virtual ~FormatList();

	int getOrder(char* type, char* format);

	bool isIDSupported(char* ID);

	bool getSupport(char* ID, bool* audio, bool* video, char** format, char** quality);

	struct FormatListItem {
		char* id;
		bool audio;
		bool video;
		char* format;
		char* quality;

		unsigned int formatOrder;
		unsigned int qualityOrder;
	};

	Array< FormatList::FormatListItem*>* get();

private:

	const unsigned int compressedFormatsLength = 664;
	const unsigned char compressedFormats[664UL + 1] = {
		0x00, 0x00, 0x14, 0x8B, 0x78, 0x01, 0xAD, 0x98, 0xC1, 0x6E, 0xDB, 0x30, 0x0C, 0x86, 0x77, 0x0E, 0x90, 0x77, 0x28, 0x7C, 0x5D, 0x0E, 0x12, 0x45, 0xC9, 0x52, 0x6E, 0x03, 0xBA, 0x43, 0x4F, 0x3D, 0x6D, 0x97, 0x61, 0x87, 0x0C, 0x4B, 0xB7, 0xA0,
		0x09, 0x96, 0xAD, 0xD9, 0x86, 0xA2, 0xE8, 0xBB, 0xD7, 0x96, 0x65, 0x44, 0x62, 0x8B, 0x24, 0xA4, 0x7C, 0x12, 0x43, 0x9B, 0x9F, 0x2C, 0xF2, 0xA7, 0xE4, 0xF8, 0x69, 0x3E, 0x6B, 0xEE, 0x7E, 0xFD, 0xD9, 0xAD, 0x0E, 0x0F, 0xCD, 0xF2, 0x4B, 0xF7,
		0xE3, 0xE7, 0xF6, 0xA1, 0x59, 0x74, 0xA3, 0xF9, 0xB1, 0x8F, 0xE3, 0xDD, 0xF6, 0x5F, 0x1C, 0x77, 0x7B, 0x1C, 0x46, 0x5C, 0xC5, 0xF1, 0xFF, 0xFA, 0xDB, 0xAE, 0x99, 0xCF, 0xBE, 0xF6, 0xF6, 0xEF, 0xBF, 0xAB, 0xED, 0xE6, 0xB0, 0x59, 0x27, 0x04,
		0xFA, 0xFB, 0x78, 0x8B, 0x55, 0xC3, 0xD8, 0xA6, 0x51, 0x43, 0xBA, 0xA0, 0x5D, 0xF2, 0x80, 0x75, 0xE9, 0x16, 0x18, 0x66, 0xD3, 0x88, 0x47, 0xC3, 0xA9, 0xC1, 0xF4, 0x6A, 0xF0, 0x01, 0x66, 0x46, 0xBA, 0x08, 0x6D, 0xF2, 0x19, 0x97, 0x19, 0xE9,
		0x22, 0x8E, 0x91, 0xBD, 0x91, 0x7C, 0x2D, 0x24, 0x5F, 0x6F, 0x8C, 0x33, 0xA8, 0xF1, 0xC6, 0x68, 0x8D, 0x5E, 0x1C, 0xE7, 0x8B, 0xD6, 0x38, 0xA1, 0x1E, 0x27, 0x8A, 0x56, 0xF2, 0x1A, 0x35, 0xAE, 0x00, 0x4D, 0x3F, 0x41, 0x4A, 0xCC, 0xE6, 0xB0,
		0xDE, 0x0D, 0x49, 0x79, 0x6A, 0x36, 0xDF, 0x9B, 0xA5, 0x5D, 0x5C, 0x35, 0x87, 0xC7, 0xFD, 0xBA, 0x59, 0x36, 0x1F, 0x3E, 0x5D, 0xDF, 0xDC, 0xBE, 0xFF, 0x7C, 0x73, 0xFD, 0xF1, 0xB6, 0xE9, 0xBC, 0x43, 0x0D, 0x3A, 0x7F, 0xCC, 0xF7, 0x55, 0x4A,
		0xE9, 0x63, 0xE7, 0x88, 0xAB, 0x7E, 0x5E, 0x8C, 0x08, 0x27, 0x41, 0xB4, 0x05, 0x42, 0xB7, 0xE7, 0x19, 0xB1, 0xFC, 0x39, 0x23, 0x56, 0x26, 0x63, 0xF8, 0xF3, 0x8C, 0x28, 0x99, 0x9C, 0x11, 0x6B, 0x74, 0x64, 0x00, 0x08, 0x18, 0xB1, 0x7E, 0x47,
		0x86, 0x41, 0x41, 0x3E, 0xC8, 0x73, 0x18, 0x49, 0x59, 0xA2, 0xB6, 0x32, 0x86, 0x93, 0xE4, 0x94, 0x30, 0x5A, 0x41, 0x3E, 0x06, 0xED, 0x66, 0x10, 0x51, 0x61, 0xA2, 0x7C, 0x8F, 0x10, 0x34, 0xE7, 0x21, 0x71, 0x03, 0x38, 0x95, 0x56, 0x44, 0x09,
		0x84, 0xE4, 0x15, 0xAD, 0x04, 0x42, 0x44, 0x82, 0x4E, 0x02, 0xA1, 0x99, 0xF5, 0x50, 0x2F, 0x79, 0x6F, 0x04, 0x0C, 0x92, 0x12, 0x8F, 0xF5, 0x6D, 0xE3, 0xED, 0x04, 0x52, 0x0B, 0x17, 0x24, 0x24, 0x1E, 0x27, 0x27, 0xB6, 0xB3, 0x60, 0x04, 0x0C,
		0x92, 0xD4, 0x80, 0x02, 0x06, 0x49, 0x6A, 0xB0, 0x02, 0x06, 0x49, 0x6A, 0x70, 0x02, 0x06, 0x4D, 0xAA, 0x56, 0x6A, 0x82, 0xDE, 0xD3, 0x4A, 0x4F, 0xD0, 0x7C, 0x5A, 0xC1, 0x04, 0xDD, 0xA7, 0xCD, 0x04, 0x3A, 0xD1, 0x26, 0x13, 0xCA, 0x05, 0x5A,
		0x7D, 0x15, 0x8E, 0xAC, 0x70, 0x9A, 0xCE, 0xFC, 0x88, 0xE0, 0x77, 0xAC, 0xCE, 0x4F, 0x07, 0x7E, 0xB3, 0xEA, 0xFC, 0x60, 0x10, 0xF4, 0xA9, 0xCE, 0xCF, 0x84, 0x4B, 0x72, 0x97, 0x5E, 0x6C, 0x72, 0x42, 0x20, 0x25, 0x2C, 0x09, 0xFD, 0x3B, 0x61,
		0xB9, 0xFE, 0xFB, 0x3C, 0x1A, 0x15, 0x2B, 0x3A, 0xBE, 0x27, 0xE6, 0xE1, 0x9A, 0x15, 0x1E, 0x5F, 0x2A, 0xB3, 0x70, 0xAB, 0x45, 0xAD, 0x5D, 0x64, 0xD0, 0x29, 0x5E, 0x05, 0xC8, 0xCB, 0x92, 0x3B, 0x59, 0xC0, 0xF3, 0xDD, 0xEC, 0x3C, 0x2F, 0x9E,
		0xEA, 0xCF, 0x05, 0x5E, 0xFC, 0x2B, 0x05, 0xB5, 0x27, 0x4B, 0xF0, 0x06, 0xA0, 0x2C, 0x21, 0xE8, 0xBA, 0x05, 0x80, 0xE6, 0x2E, 0xA0, 0x2C, 0x00, 0x20, 0xF0, 0xE2, 0xC9, 0xF6, 0x01, 0x68, 0xAA, 0x0A, 0x08, 0x88, 0x75, 0xEB, 0x47, 0x5B, 0x19,
		0xEF, 0x2A, 0xE3, 0x99, 0x02, 0x26, 0x3B, 0x18, 0xA0, 0xAF, 0x13, 0x20, 0x60, 0xE0, 0x09, 0xB0, 0xFF, 0xEF, 0x99, 0x85, 0x5B, 0xC5, 0x0B, 0x6F, 0x49, 0x38, 0x57, 0xFE, 0xAE, 0x8C, 0x77, 0xC8, 0xDD, 0x3E, 0xCA, 0xD5, 0x3B, 0x57, 0xB9, 0x81,
		0x43, 0xDE, 0xC0, 0x17, 0x36, 0x50, 0xF9, 0x08, 0x2D, 0xB3, 0x83, 0x86, 0xFF, 0xC1, 0x39, 0xC0, 0xD7, 0xB5, 0x70, 0xF0, 0xEC, 0x33, 0xB4, 0x4C, 0x41, 0x08, 0xFC, 0x53, 0xB4, 0x20, 0x18, 0x05, 0xFC, 0x2E, 0x20, 0x04, 0x23, 0xE8, 0x03, 0x82,
		0xF0, 0x82, 0x4A, 0x96, 0x08, 0xCD, 0x7C, 0x8A, 0xE1, 0x9B, 0x47, 0x0E, 0xB0, 0x02, 0x40, 0xF9, 0x0C, 0x46, 0xF1, 0xE5, 0x40, 0x08, 0x9A, 0xBF, 0xA7, 0x13, 0x02, 0xF0, 0x77, 0x75, 0x42, 0x30, 0xFC, 0x7D, 0x95, 0x10, 0xB0, 0x56, 0x53, 0xC6,
		0x56, 0x6B, 0xCA, 0xB8, 0x6A, 0x4D, 0x99, 0x56, 0x28, 0x89, 0xF9, 0xAC, 0xFB, 0x58, 0x36, 0x9F, 0x3D, 0xBF, 0x7B, 0x01, 0x3C, 0x19, 0x89, 0xE3, 0x00
	};

	FormatList::FormatListItem* data = nullptr;
	unsigned int dataSize = 0;
	bool valid = false;
	FormatList();
};

class YoutubeVideoInfo {

	friend Youtube;

public:
	YoutubeVideoInfo(YoutubeSettings* settings, FormatList* fmtList, bool* stop, char* url, bool all);

	virtual ~YoutubeVideoInfo() {
		FREE_NOT_NULL(videoID);
		FREE_NOT_NULL(videoName);
		for (unsigned int i = 0; i < items.getSize(); i++) {
			YoutubeVideoInfoItem* item = items.get(i);
			if (item != nullptr) {
				FREE_NOT_NULL(item->url);
				FREE_NOT_NULL(item->rawFormat);
				FREE_NOT_NULL(item);
			}
		};
	}

	YoutubeVideo* download(bool* stop, YoutubeVideoInfoItem* item, DownloadProgress reporter, void* reporterInstance);

	Array<YoutubeVideoInfoItem*> items;

	bool valid;
	char* videoID = nullptr;
	char* videoName = nullptr;
	unsigned int length;

private:
	YoutubeSettings* settings;

};

class YoutubeDecipherer {

	friend class YoutubeVideoInfo;

	struct CipherFuncType {
		bool isReverse;
		bool isSwap;
		bool isSlice;
	};

	struct CiptherFuncCall {
		struct CipherFuncType* type;
		int index1;
		int index2;
	};

public:
	char* decipher(char* input);

	YoutubeDecipherer(YoutubeSettings* settings, bool* stop, char* videoID);

	virtual ~YoutubeDecipherer();

	bool isGood() {
		return valid;
	}

	char* getTitle() {
		return title;
	}

private:

	char* getPlayerSource(YoutubeSettings* settings, bool* stop, char* videoID);

	char* getPlayerDecryptFunctionName(char* script);

	bool gatherCiphers(char* code, char* fname);

	bool applyCipher(CiptherFuncCall* call, char* data);

	bool valid = false;

	char* title = nullptr;
	Array<CiptherFuncCall*> sequences;
	Map<char*, YoutubeDecipherer::CipherFuncType*>* funcs = nullptr;
};

class Youtube {
public:
	Youtube(YoutubeSettings* settings);
	virtual ~Youtube();

	YoutubeVideoInfo* getVideo(bool* stop, char* url, bool all);

	Array<FormatList::FormatListItem*>* getFormats();

private:

	FormatList* fmtList = nullptr;

	YoutubeGetter getter;

	YoutubeSettings* settings;
};

